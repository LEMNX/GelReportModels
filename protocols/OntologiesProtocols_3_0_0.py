"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse

import avro.schema

version = '3.0.0'


class AlleleOrigin(object):
    """
    Variant origin.  * `SO_0001781`: de novo variant.
    http://purl.obolibrary.org/obo/SO_0001781 * `SO_0001778`: germline
    variant. http://purl.obolibrary.org/obo/SO_0001778 * `SO_0001775`:
    maternal variant. http://purl.obolibrary.org/obo/SO_0001775 *
    `SO_0001776`: paternal variant.
    http://purl.obolibrary.org/obo/SO_0001776 * `SO_0001779`: pedigree
    specific variant. http://purl.obolibrary.org/obo/SO_0001779 *
    `SO_0001780`: population specific variant.
    http://purl.obolibrary.org/obo/SO_0001780 * `SO_0001777`: somatic
    variant. http://purl.obolibrary.org/obo/SO_0001777
    """
    SO_0001781 = "SO_0001781"
    SO_0001778 = "SO_0001778"
    SO_0001775 = "SO_0001775"
    SO_0001776 = "SO_0001776"
    SO_0001779 = "SO_0001779"
    SO_0001780 = "SO_0001780"
    SO_0001777 = "SO_0001777"


class Confidence(object):
    """
    Confidence based on the Confidence Information Ontology  *
    `CIO_0000029`: high confidence level
    http://purl.obolibrary.org/obo/CIO_0000029 * `CIO_0000031`: low
    confidence level http://purl.obolibrary.org/obo/CIO_0000031 *
    `CIO_0000030`: medium confidence level
    http://purl.obolibrary.org/obo/CIO_0000030 * `CIO_0000039`:
    rejected http://purl.obolibrary.org/obo/CIO_0000039
    """
    CIO_0000031 = "CIO_0000031"
    CIO_0000030 = "CIO_0000030"
    CIO_0000029 = "CIO_0000029"
    CIO_0000039 = "CIO_0000039"


class ConsistencyStatus(object):
    """
    The consistency of evidences for a given phenotype. This
    aggregates all evidences for a given phenotype and all
    evidences with no phenotype associated (e.g.: in silico impact
    prediction, population frequency).     This is based on the
    Confidence Information Ontology terms.  * `CIO_0000033`:
    congruent, all evidences are consistent.
    http://purl.obolibrary.org/obo/CIO_0000033 * `CIO_0000034`:
    conflict, there are conflicting evidences. This should correspond
    to a `VariantClassification` of `uncertain_significance` for
    mendelian disorders. http://purl.obolibrary.org/obo/CIO_0000034 *
    `CIO_0000035`: strongly conflicting.
    http://purl.obolibrary.org/obo/CIO_0000035 * `CIO_0000036`: weakly
    conflicting. http://purl.obolibrary.org/obo/CIO_0000036
    """
    CIO_0000033 = "CIO_0000033"
    CIO_0000034 = "CIO_0000034"
    CIO_0000035 = "CIO_0000035"
    CIO_0000036 = "CIO_0000036"


class OBOOntologyTerm(ProtocolElement):
    """
    A property in the form of name-value pair.     Names are
    restricted to ontology ids, they should be checked against
    existing ontologies in resources like     Ontology Lookup Service.
    """
    _schemaSource = """
{"namespace": "org.gel.models.ontologies", "type": "record", "name":
"OBOOntologyTerm", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "value"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "id",
        "value",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'value'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', 'None')
        self.value = kwargs.get(
            'value', None)


class VariantClassification(object):
    """
    Variant classification with Sequence Ontology terms. This is an
    optional classification, that might be inferred     from the
    `VariantClassification`.  * `SO_0001770`: benign_variant (http://w
    ww.sequenceontology.org/browser/current_svn/term/SO:0001770) *
    `SO:0001771`: disease_associated_variant (http://www.sequenceontol
    ogy.org/browser/current_svn/term/SO:0001771) * `SO:0001772`:
    disease_causing_variant (http://www.sequenceontology.org/browser/c
    urrent_svn/term/SO:0001772) * `SO:0001774`: quantitative_variant (
    http://www.sequenceontology.org/browser/current_svn/term/SO:000177
    4)
    """
    SO_0001770 = "SO_0001770"
    SO_0001771 = "SO_0001771"
    SO_0001772 = "SO_0001772"
    SO_0001774 = "SO_0001774"


class VariantFunctionalEffect(object):
    """
    Variant effect with Sequence Ontology terms.  * `SO_0002052`:
    dominant_negative_variant
    (http://purl.obolibrary.org/obo/SO_0002052) * `SO_0002053`:
    gain_of_function_variant
    (http://purl.obolibrary.org/obo/SO_0002053) * `SO_0001773`:
    lethal_variant (http://purl.obolibrary.org/obo/SO_0001773) *
    `SO_0002054`: loss_of_function_variant
    (http://purl.obolibrary.org/obo/SO_0002054) * `SO_0001786`:
    loss_of_heterozygosity (http://purl.obolibrary.org/obo/SO_0001786)
    * `SO_0002055`: null_variant
    (http://purl.obolibrary.org/obo/SO_0002055)
    """
    SO_0002052 = "SO_0002052"
    SO_0002053 = "SO_0002053"
    SO_0001773 = "SO_0001773"
    SO_0002054 = "SO_0002054"
    SO_0001786 = "SO_0001786"
    SO_0002055 = "SO_0002055"
