"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse

import avro.schema

version = '3.0.0'


class AdditionalAttribute(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "AdditionalAttribute", "fields": [{"type":
{"values": "string", "type": "map"}, "name": "attribute"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "attribute",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'attribute'
    ]

    def __init__(self, **kwargs):
        self.attribute = kwargs.get(
            'attribute', None)


class Aggregation(object):
    """
    No documentation
    """
    NONE = "NONE"
    BASIC = "BASIC"
    EVS = "EVS"
    EXAC = "EXAC"


class AllelesCode(object):
    """
    No documentation
    """
    ALLELES_OK = "ALLELES_OK"
    ALLELES_MISSING = "ALLELES_MISSING"
    MULTIPLE_ALTERNATES = "MULTIPLE_ALTERNATES"
    HAPLOID = "HAPLOID"


class AlternateCoordinate(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "AlternateCoordinate", "fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"doc": "", "type": ["null", "int"],
"name": "start"}, {"doc": "", "type": ["null", "int"], "name": "end"},
{"doc": "", "type": ["null", "string"], "name": "reference"}, {"doc":
"", "type": "string", "name": "alternate"}, {"type": {"symbols":
["SNV", "SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION",
"TRANSLOCATION", "INVERSION", "CNV", "NO_VARIATION", "SYMBOLIC",
"MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "alternate",
        "chromosome",
        "end",
        "reference",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'chromosome', 'end', 'reference', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', 'None')
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.end = kwargs.get(
            'end', None)
        self.reference = kwargs.get(
            'reference', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)


class ClinVar(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "ClinVar", "fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "clinicalSignificance"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": {"items": "string", "type": "array"}, "name": "geneNames"},
{"type": "string", "name": "reviewStatus"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "accession",
        "clinicalSignificance",
        "geneNames",
        "reviewStatus",
        "traits",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'accession', 'clinicalSignificance', 'geneNames',
        'reviewStatus', 'traits'
    ]

    def __init__(self, **kwargs):
        self.accession = kwargs.get(
            'accession', 'None')
        self.clinicalSignificance = kwargs.get(
            'clinicalSignificance', 'None')
        self.geneNames = kwargs.get(
            'geneNames', None)
        self.reviewStatus = kwargs.get(
            'reviewStatus', 'None')
        self.traits = kwargs.get(
            'traits', None)


class ConsequenceType(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "ConsequenceType", "fields": [{"type": ["null",
"string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"ensemblGeneId"}, {"type": ["null", "string"], "name":
"ensemblTranscriptId"}, {"type": ["null", "string"], "name":
"strand"}, {"type": ["null", "string"], "name": "biotype"}, {"type":
["null", "int"], "name": "exonNumber"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "transcriptAnnotationFlags"},
{"type": ["null", "int"], "name": "cdnaPosition"}, {"type": ["null",
"int"], "name": "cdsPosition"}, {"type": ["null", "string"], "name":
"codon"}, {"type": ["null", {"fields": [{"default": null, "type":
["null", "string"], "name": "uniprotAccession"}, {"default": null,
"type": ["null", "string"], "name": "uniprotName"}, {"type": "int",
"name": "position"}, {"type": ["null", "string"], "name":
"reference"}, {"type": ["null", "string"], "name": "alternate"},
{"type": ["null", "string"], "name": "uniprotVariantId"}, {"type":
["null", "string"], "name": "functionalDescription"}, {"type":
["null", {"items": {"fields": [{"type": "double", "name": "score"},
{"type": "string", "name": "source"}, {"type": ["null", "string"],
"name": "description"}], "type": "record", "name": "Score"}, "type":
"array"}], "name": "substitutionScores"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "keywords"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "id"},
{"type": "int", "name": "start"}, {"type": "int", "name": "end"},
{"type": ["null", "string"], "name": "type"}, {"type": ["null",
"string"], "name": "description"}], "type": "record", "name":
"ProteinFeature"}, "type": "array"}], "name": "features"}], "type":
"record", "name": "ProteinVariantAnnotation"}], "name":
"proteinVariantAnnotation"}, {"type": {"items": {"fields": [{"type":
"string", "name": "accession"}, {"type": "string", "name": "name"}],
"type": "record", "name": "SequenceOntologyTerm"}, "type": "array"},
"name": "sequenceOntologyTerms"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "biotype",
        "cdnaPosition",
        "cdsPosition",
        "codon",
        "ensemblGeneId",
        "ensemblTranscriptId",
        "exonNumber",
        "geneName",
        "proteinVariantAnnotation",
        "sequenceOntologyTerms",
        "strand",
        "transcriptAnnotationFlags",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'proteinVariantAnnotation': ProteinVariantAnnotation,
            'sequenceOntologyTerms': SequenceOntologyTerm,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'proteinVariantAnnotation': ProteinVariantAnnotation,
            'sequenceOntologyTerms': SequenceOntologyTerm,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'biotype', 'cdnaPosition', 'cdsPosition', 'codon',
        'ensemblGeneId', 'ensemblTranscriptId', 'exonNumber',
        'geneName', 'proteinVariantAnnotation',
        'sequenceOntologyTerms', 'strand', 'transcriptAnnotationFlags'
    ]

    def __init__(self, **kwargs):
        self.biotype = kwargs.get(
            'biotype', None)
        self.cdnaPosition = kwargs.get(
            'cdnaPosition', None)
        self.cdsPosition = kwargs.get(
            'cdsPosition', None)
        self.codon = kwargs.get(
            'codon', None)
        self.ensemblGeneId = kwargs.get(
            'ensemblGeneId', None)
        self.ensemblTranscriptId = kwargs.get(
            'ensemblTranscriptId', None)
        self.exonNumber = kwargs.get(
            'exonNumber', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.proteinVariantAnnotation = kwargs.get(
            'proteinVariantAnnotation', None)
        self.sequenceOntologyTerms = kwargs.get(
            'sequenceOntologyTerms', None)
        self.strand = kwargs.get(
            'strand', None)
        self.transcriptAnnotationFlags = kwargs.get(
            'transcriptAnnotationFlags', None)


class Cosmic(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Cosmic", "fields": [{"type": "string", "name":
"mutationId"}, {"type": "string", "name": "primarySite"}, {"type":
"string", "name": "siteSubtype"}, {"type": "string", "name":
"primaryHistology"}, {"type": "string", "name": "histologySubtype"},
{"type": "string", "name": "sampleSource"}, {"type": "string", "name":
"tumourOrigin"}, {"type": "string", "name": "geneName"}, {"type":
"string", "name": "mutationSomaticStatus"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "geneName",
        "histologySubtype",
        "mutationId",
        "mutationSomaticStatus",
        "primaryHistology",
        "primarySite",
        "sampleSource",
        "siteSubtype",
        "tumourOrigin",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'geneName', 'histologySubtype', 'mutationId',
        'mutationSomaticStatus', 'primaryHistology', 'primarySite',
        'sampleSource', 'siteSubtype', 'tumourOrigin'
    ]

    def __init__(self, **kwargs):
        self.geneName = kwargs.get(
            'geneName', 'None')
        self.histologySubtype = kwargs.get(
            'histologySubtype', 'None')
        self.mutationId = kwargs.get(
            'mutationId', 'None')
        self.mutationSomaticStatus = kwargs.get(
            'mutationSomaticStatus', 'None')
        self.primaryHistology = kwargs.get(
            'primaryHistology', 'None')
        self.primarySite = kwargs.get(
            'primarySite', 'None')
        self.sampleSource = kwargs.get(
            'sampleSource', 'None')
        self.siteSubtype = kwargs.get(
            'siteSubtype', 'None')
        self.tumourOrigin = kwargs.get(
            'tumourOrigin', 'None')


class Expression(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Expression", "fields": [{"type": ["null",
"string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"transcriptId"}, {"type": ["null", "string"], "name":
"experimentalFactor"}, {"type": ["null", "string"], "name":
"factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type":
["null", {"symbols": ["UP", "DOWN"], "type": "enum", "name":
"ExpressionCall"}], "name": "expression"}, {"type": ["null", "float"],
"name": "pvalue"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "experimentId",
        "experimentalFactor",
        "expression",
        "factorValue",
        "geneName",
        "pvalue",
        "technologyPlatform",
        "transcriptId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'experimentId', 'experimentalFactor', 'expression',
        'factorValue', 'geneName', 'pvalue', 'technologyPlatform',
        'transcriptId'
    ]

    def __init__(self, **kwargs):
        self.experimentId = kwargs.get(
            'experimentId', None)
        self.experimentalFactor = kwargs.get(
            'experimentalFactor', None)
        self.expression = kwargs.get(
            'expression', None)
        self.factorValue = kwargs.get(
            'factorValue', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.pvalue = kwargs.get(
            'pvalue', None)
        self.technologyPlatform = kwargs.get(
            'technologyPlatform', None)
        self.transcriptId = kwargs.get(
            'transcriptId', None)


class ExpressionCall(object):
    """
    No documentation
    """
    UP = "UP"
    DOWN = "DOWN"


class FileEntry(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "FileEntry", "fields": [{"doc": "", "type": ["null",
"string"], "name": "fileId"}, {"doc": "", "type": ["null", "string"],
"name": "call"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "attributes"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "attributes",
        "call",
        "fileId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'attributes', 'call', 'fileId'
    ]

    def __init__(self, **kwargs):
        self.attributes = kwargs.get(
            'attributes', None)
        self.call = kwargs.get(
            'call', None)
        self.fileId = kwargs.get(
            'fileId', None)


class GeneDrugInteraction(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "GeneDrugInteraction", "fields": [{"type": ["null",
"string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"],
"name": "type"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "drugName",
        "geneName",
        "source",
        "studyType",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'drugName', 'geneName', 'source', 'studyType', 'type'
    ]

    def __init__(self, **kwargs):
        self.drugName = kwargs.get(
            'drugName', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.source = kwargs.get(
            'source', None)
        self.studyType = kwargs.get(
            'studyType', None)
        self.type = kwargs.get(
            'type', None)


class GeneTraitAssociation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "GeneTraitAssociation", "fields": [{"type":
"string", "name": "id"}, {"type": "string", "name": "name"}, {"type":
["null", "string"], "name": "hpo"}, {"type": ["null", "float"],
"name": "score"}, {"type": ["null", "int"], "name":
"numberOfPubmeds"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string",
"name": "source"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "associationTypes",
        "hpo",
        "id",
        "name",
        "numberOfPubmeds",
        "score",
        "source",
        "sources",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'associationTypes', 'hpo', 'id', 'name', 'numberOfPubmeds',
        'score', 'source', 'sources'
    ]

    def __init__(self, **kwargs):
        self.associationTypes = kwargs.get(
            'associationTypes', None)
        self.hpo = kwargs.get(
            'hpo', None)
        self.id = kwargs.get(
            'id', 'None')
        self.name = kwargs.get(
            'name', 'None')
        self.numberOfPubmeds = kwargs.get(
            'numberOfPubmeds', None)
        self.score = kwargs.get(
            'score', None)
        self.source = kwargs.get(
            'source', 'None')
        self.sources = kwargs.get(
            'sources', None)


class Genotype(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Genotype", "fields": [{"type": "string", "name":
"reference"}, {"type": "string", "name": "alternate"}, {"default": [],
"type": {"items": "int", "type": "array"}, "name": "allelesIdx"},
{"type": "boolean", "name": "phased"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "alternate",
        "phased",
        "reference",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'allelesIdx', 'alternate', 'phased', 'reference'
    ]

    def __init__(self, **kwargs):
        self.allelesIdx = kwargs.get(
            'allelesIdx', [])
        self.alternate = kwargs.get(
            'alternate', 'None')
        self.phased = kwargs.get(
            'phased', None)
        self.reference = kwargs.get(
            'reference', 'None')


class Gwas(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Gwas", "fields": [{"type": "string", "name":
"snpIdCurrent"}, {"type": {"items": "string", "type": "array"},
"name": "traits"}, {"type": "double", "name": "riskAlleleFrequency"},
{"type": "string", "name": "reportedGenes"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "reportedGenes",
        "riskAlleleFrequency",
        "snpIdCurrent",
        "traits",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'reportedGenes', 'riskAlleleFrequency', 'snpIdCurrent',
        'traits'
    ]

    def __init__(self, **kwargs):
        self.reportedGenes = kwargs.get(
            'reportedGenes', 'None')
        self.riskAlleleFrequency = kwargs.get(
            'riskAlleleFrequency', None)
        self.snpIdCurrent = kwargs.get(
            'snpIdCurrent', 'None')
        self.traits = kwargs.get(
            'traits', None)


class PopulationFrequency(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "PopulationFrequency", "fields": [{"type": "string",
"name": "study"}, {"type": "string", "name": "population"}, {"type":
"string", "name": "refAllele"}, {"type": "string", "name":
"altAllele"}, {"type": "float", "name": "refAlleleFreq"}, {"type":
"float", "name": "altAlleleFreq"}, {"type": ["null", "float"], "name":
"refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name":
"altHomGenotypeFreq"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "altAllele",
        "altAlleleFreq",
        "altHomGenotypeFreq",
        "hetGenotypeFreq",
        "population",
        "refAllele",
        "refAlleleFreq",
        "refHomGenotypeFreq",
        "study",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'altAllele', 'altAlleleFreq', 'altHomGenotypeFreq',
        'hetGenotypeFreq', 'population', 'refAllele', 'refAlleleFreq',
        'refHomGenotypeFreq', 'study'
    ]

    def __init__(self, **kwargs):
        self.altAllele = kwargs.get(
            'altAllele', 'None')
        self.altAlleleFreq = kwargs.get(
            'altAlleleFreq', None)
        self.altHomGenotypeFreq = kwargs.get(
            'altHomGenotypeFreq', None)
        self.hetGenotypeFreq = kwargs.get(
            'hetGenotypeFreq', None)
        self.population = kwargs.get(
            'population', 'None')
        self.refAllele = kwargs.get(
            'refAllele', 'None')
        self.refAlleleFreq = kwargs.get(
            'refAlleleFreq', None)
        self.refHomGenotypeFreq = kwargs.get(
            'refHomGenotypeFreq', None)
        self.study = kwargs.get(
            'study', 'None')


class ProteinFeature(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "ProteinFeature", "fields": [{"type": ["null",
"string"], "name": "id"}, {"type": "int", "name": "start"}, {"type":
"int", "name": "end"}, {"type": ["null", "string"], "name": "type"},
{"type": ["null", "string"], "name": "description"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "description",
        "end",
        "id",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'description', 'end', 'id', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.description = kwargs.get(
            'description', None)
        self.end = kwargs.get(
            'end', None)
        self.id = kwargs.get(
            'id', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)


class ProteinVariantAnnotation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "ProteinVariantAnnotation", "fields": [{"default":
null, "type": ["null", "string"], "name": "uniprotAccession"},
{"default": null, "type": ["null", "string"], "name": "uniprotName"},
{"type": "int", "name": "position"}, {"type": ["null", "string"],
"name": "reference"}, {"type": ["null", "string"], "name":
"alternate"}, {"type": ["null", "string"], "name":
"uniprotVariantId"}, {"type": ["null", "string"], "name":
"functionalDescription"}, {"type": ["null", {"items": {"fields":
[{"type": "double", "name": "score"}, {"type": "string", "name":
"source"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "keywords"}, {"type": ["null", {"items": {"fields":
[{"type": ["null", "string"], "name": "id"}, {"type": "int", "name":
"start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "ProteinFeature"}, "type": "array"}],
"name": "features"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "alternate",
        "features",
        "functionalDescription",
        "keywords",
        "position",
        "reference",
        "substitutionScores",
        "uniprotVariantId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'features': ProteinFeature,
            'substitutionScores': Score,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'features': ProteinFeature,
            'substitutionScores': Score,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'features', 'functionalDescription', 'keywords',
        'position', 'reference', 'substitutionScores',
        'uniprotAccession', 'uniprotName', 'uniprotVariantId'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.features = kwargs.get(
            'features', None)
        self.functionalDescription = kwargs.get(
            'functionalDescription', None)
        self.keywords = kwargs.get(
            'keywords', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)
        self.substitutionScores = kwargs.get(
            'substitutionScores', None)
        self.uniprotAccession = kwargs.get(
            'uniprotAccession', None)
        self.uniprotName = kwargs.get(
            'uniprotName', None)
        self.uniprotVariantId = kwargs.get(
            'uniprotVariantId', None)


class Read(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.sequence", "type": "record",
"name": "Read", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "sequence"}, {"doc": "",
"type": "string", "name": "quality"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "id",
        "quality",
        "sequence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'quality', 'sequence'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', 'None')
        self.quality = kwargs.get(
            'quality', 'None')
        self.sequence = kwargs.get(
            'sequence', 'None')


class Score(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Score", "fields": [{"type": "double", "name":
"score"}, {"type": "string", "name": "source"}, {"type": ["null",
"string"], "name": "description"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "description",
        "score",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'description', 'score', 'source'
    ]

    def __init__(self, **kwargs):
        self.description = kwargs.get(
            'description', None)
        self.score = kwargs.get(
            'score', None)
        self.source = kwargs.get(
            'source', 'None')


class SequenceOntologyTerm(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "SequenceOntologyTerm", "fields": [{"type":
"string", "name": "accession"}, {"type": "string", "name": "name"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "accession",
        "name",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'accession', 'name'
    ]

    def __init__(self, **kwargs):
        self.accession = kwargs.get(
            'accession', 'None')
        self.name = kwargs.get(
            'name', 'None')


class StructuralVariation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "StructuralVariation", "fields": [{"default": 0,
"type": "int", "name": "ciStartLeft"}, {"default": 0, "type": "int",
"name": "ciStartRight"}, {"default": 0, "type": "int", "name":
"ciEndLeft"}, {"default": 0, "type": "int", "name": "ciEndRight"},
{"doc": "", "type": ["null", "int"], "name": "copyNumber"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "copyNumber",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ciEndLeft', 'ciEndRight', 'ciStartLeft', 'ciStartRight',
        'copyNumber'
    ]

    def __init__(self, **kwargs):
        self.ciEndLeft = kwargs.get(
            'ciEndLeft', 0)
        self.ciEndRight = kwargs.get(
            'ciEndRight', 0)
        self.ciStartLeft = kwargs.get(
            'ciStartLeft', 0)
        self.ciStartRight = kwargs.get(
            'ciStartRight', 0)
        self.copyNumber = kwargs.get(
            'copyNumber', None)


class StudyEntry(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "StudyEntry", "fields": [{"doc": "", "type":
["null", "string"], "name": "studyId"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": ["null", "string"],
"name": "fileId"}, {"doc": "", "type": ["null", "string"], "name":
"call"}, {"doc": "", "type": {"values": "string", "type": "map"},
"name": "attributes"}], "type": "record", "name": "FileEntry"},
"type": "array"}, "name": "files"}, {"default": null, "doc": "",
"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name":
"start"}, {"doc": "", "type": ["null", "int"], "name": "end"}, {"doc":
"", "type": ["null", "string"], "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"type": {"symbols": ["SNV",
"SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION",
"TRANSLOCATION", "INVERSION", "CNV", "NO_VARIATION", "SYMBOLIC",
"MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}], "type": "record", "name": "AlternateCoordinate"}, "type":
"array"}], "name": "secondaryAlternates"}, {"doc": "", "type":
{"items": "string", "type": "array"}, "name": "format"}, {"doc": "",
"type": {"items": {"items": "string", "type": "array"}, "type":
"array"}, "name": "samplesData"}, {"doc": "", "type": {"values":
{"fields": [{"type": ["null", "string"], "name": "refAllele"},
{"type": ["null", "string"], "name": "altAllele"}, {"type": ["null",
"int"], "name": "refAlleleCount"}, {"type": ["null", "int"], "name":
"altAlleleCount"}, {"type": {"values": "int", "type": "map", "java-
key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesCount"}, {"type": {"values": "float", "type": "map", "java-
key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"},
{"type": ["null", "int"], "name": "missingGenotypes"}, {"type":
["null", "float"], "name": "refAlleleFreq"}, {"type": ["null",
"float"], "name": "altAlleleFreq"}, {"type": ["null", "float"],
"name": "maf"}, {"type": ["null", "float"], "name": "mgf"}, {"type":
["null", "string"], "name": "mafAllele"}, {"type": ["null", "string"],
"name": "mgfGenotype"}, {"type": ["null", "boolean"], "name":
"passedFilters"}, {"type": ["null", "int"], "name":
"mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name":
"controlsPercentDominant"}, {"type": ["null", "float"], "name":
"casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name":
"quality"}, {"type": ["null", "int"], "name": "numSamples"},
{"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields":
[{"type": ["null", "float"], "name": "chi2"}, {"type": ["null",
"float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null",
"int"], "name": "n_Aa_10"}, {"type": ["null", "int"], "name":
"n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"],
"name": "e_aa_00"}, {"type": ["null", "float"], "name": "p"}, {"type":
["null", "float"], "name": "q"}], "type": "record", "name":
"VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record",
"name": "VariantStats"}, "type": "map"}, "name": "stats"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "format",
        "samplesData",
        "stats",
        "studyId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'files': FileEntry,
            'secondaryAlternates': AlternateCoordinate,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'files': FileEntry,
            'secondaryAlternates': AlternateCoordinate,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'files', 'format', 'samplesData', 'secondaryAlternates',
        'stats', 'studyId'
    ]

    def __init__(self, **kwargs):
        self.files = kwargs.get(
            'files', [])
        self.format = kwargs.get(
            'format', None)
        self.samplesData = kwargs.get(
            'samplesData', None)
        self.secondaryAlternates = kwargs.get(
            'secondaryAlternates', None)
        self.stats = kwargs.get(
            'stats', None)
        self.studyId = kwargs.get(
            'studyId', None)


class VariantAnnotation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantAnnotation", "fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name":
"start"}, {"type": ["null", "string"], "name": "reference"}, {"type":
["null", "string"], "name": "alternate"}, {"type": ["null", "string"],
"name": "ancestralAllele"}, {"type": ["null", "string"], "name":
"id"}, {"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "id"}, {"type": ["null", "string"], "name":
"source"}], "type": "record", "name": "Xref"}, "type": "array"}],
"name": "xrefs"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "hgvs"}, {"type": ["null", "string"], "name":
"displayConsequenceType"}, {"default": [], "type": {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "ensemblGeneId"}, {"type": ["null",
"string"], "name": "ensemblTranscriptId"}, {"type": ["null",
"string"], "name": "strand"}, {"type": ["null", "string"], "name":
"biotype"}, {"type": ["null", "int"], "name": "exonNumber"}, {"type":
["null", {"items": "string", "type": "array"}], "name":
"transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"},
{"type": ["null", "string"], "name": "codon"}, {"type": ["null",
{"fields": [{"default": null, "type": ["null", "string"], "name":
"uniprotAccession"}, {"default": null, "type": ["null", "string"],
"name": "uniprotName"}, {"type": "int", "name": "position"}, {"type":
["null", "string"], "name": "reference"}, {"type": ["null", "string"],
"name": "alternate"}, {"type": ["null", "string"], "name":
"uniprotVariantId"}, {"type": ["null", "string"], "name":
"functionalDescription"}, {"type": ["null", {"items": {"fields":
[{"type": "double", "name": "score"}, {"type": "string", "name":
"source"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "keywords"}, {"type": ["null", {"items": {"fields":
[{"type": ["null", "string"], "name": "id"}, {"type": "int", "name":
"start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "ProteinFeature"}, "type": "array"}],
"name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"},
{"type": {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name":
"sequenceOntologyTerms"}], "type": "record", "name":
"ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name":
"study"}, {"type": "string", "name": "population"}, {"type": "string",
"name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name":
"altAlleleFreq"}, {"type": ["null", "float"], "name":
"refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name":
"altHomGenotypeFreq"}], "type": "record", "name":
"PopulationFrequency"}, "type": "array"}], "name":
"populationFrequencies"}, {"type": ["null", "string"], "name":
"minorAllele"}, {"type": ["null", "float"], "name":
"minorAlleleFreq"}, {"type": ["null", {"items": "Score", "type":
"array"}], "name": "conservation"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "transcriptId"}, {"type": ["null",
"string"], "name": "experimentalFactor"}, {"type": ["null", "string"],
"name": "factorValue"}, {"type": ["null", "string"], "name":
"experimentId"}, {"type": ["null", "string"], "name":
"technologyPlatform"}, {"type": ["null", {"symbols": ["UP", "DOWN"],
"type": "enum", "name": "ExpressionCall"}], "name": "expression"},
{"type": ["null", "float"], "name": "pvalue"}], "type": "record",
"name": "Expression"}, "type": "array"}], "name": "geneExpression"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name":
"id"}, {"type": "string", "name": "name"}, {"type": ["null",
"string"], "name": "hpo"}, {"type": ["null", "float"], "name":
"score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"},
{"type": ["null", {"items": "string", "type": "array"}], "name":
"associationTypes"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "sources"}, {"type": "string", "name": "source"}],
"type": "record", "name": "GeneTraitAssociation"}, "type": "array"}],
"name": "geneTraitAssociation"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"],
"name": "source"}, {"type": ["null", "string"], "name": "studyType"},
{"type": ["null", "string"], "name": "type"}], "type": "record",
"name": "GeneDrugInteraction"}, "type": "array"}], "name":
"geneDrugInteraction"}, {"type": ["null", {"fields": [{"type":
["null", {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "clinicalSignificance"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": {"items": "string", "type": "array"}, "name": "geneNames"},
{"type": "string", "name": "reviewStatus"}], "type": "record", "name":
"ClinVar"}, "type": "array"}], "name": "clinvar"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "snpIdCurrent"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": "double", "name": "riskAlleleFrequency"}, {"type": "string",
"name": "reportedGenes"}], "type": "record", "name": "Gwas"}, "type":
"array"}], "name": "gwas"}, {"type": ["null", {"items": {"fields":
[{"type": "string", "name": "mutationId"}, {"type": "string", "name":
"primarySite"}, {"type": "string", "name": "siteSubtype"}, {"type":
"string", "name": "primaryHistology"}, {"type": "string", "name":
"histologySubtype"}, {"type": "string", "name": "sampleSource"},
{"type": "string", "name": "tumourOrigin"}, {"type": "string", "name":
"geneName"}, {"type": "string", "name": "mutationSomaticStatus"}],
"type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}],
"name": "variantTraitAssociation"}, {"type": ["null", {"items":
"Score", "type": "array"}], "name": "functionalScore"}, {"default":
null, "type": ["null", {"values": {"fields": [{"type": {"values":
"string", "type": "map"}, "name": "attribute"}], "type": "record",
"name": "AdditionalAttribute"}, "type": "map"}], "name":
"additionalAttributes"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "alternate",
        "ancestralAllele",
        "chromosome",
        "conservation",
        "displayConsequenceType",
        "functionalScore",
        "geneDrugInteraction",
        "geneExpression",
        "geneTraitAssociation",
        "hgvs",
        "id",
        "minorAllele",
        "minorAlleleFreq",
        "populationFrequencies",
        "reference",
        "start",
        "variantTraitAssociation",
        "xrefs",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consequenceTypes': ConsequenceType,
            'conservation': Score,
            'functionalScore': Score,
            'geneDrugInteraction': GeneDrugInteraction,
            'geneExpression': Expression,
            'geneTraitAssociation': GeneTraitAssociation,
            'populationFrequencies': PopulationFrequency,
            'variantTraitAssociation': VariantTraitAssociation,
            'xrefs': Xref,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consequenceTypes': ConsequenceType,
            'conservation': Score,
            'functionalScore': Score,
            'geneDrugInteraction': GeneDrugInteraction,
            'geneExpression': Expression,
            'geneTraitAssociation': GeneTraitAssociation,
            'populationFrequencies': PopulationFrequency,
            'variantTraitAssociation': VariantTraitAssociation,
            'xrefs': Xref,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalAttributes', 'alternate', 'ancestralAllele',
        'chromosome', 'consequenceTypes', 'conservation',
        'displayConsequenceType', 'functionalScore',
        'geneDrugInteraction', 'geneExpression',
        'geneTraitAssociation', 'hgvs', 'id', 'minorAllele',
        'minorAlleleFreq', 'populationFrequencies', 'reference',
        'start', 'variantTraitAssociation', 'xrefs'
    ]

    def __init__(self, **kwargs):
        self.additionalAttributes = kwargs.get(
            'additionalAttributes', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.ancestralAllele = kwargs.get(
            'ancestralAllele', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.consequenceTypes = kwargs.get(
            'consequenceTypes', [])
        self.conservation = kwargs.get(
            'conservation', None)
        self.displayConsequenceType = kwargs.get(
            'displayConsequenceType', None)
        self.functionalScore = kwargs.get(
            'functionalScore', None)
        self.geneDrugInteraction = kwargs.get(
            'geneDrugInteraction', None)
        self.geneExpression = kwargs.get(
            'geneExpression', None)
        self.geneTraitAssociation = kwargs.get(
            'geneTraitAssociation', None)
        self.hgvs = kwargs.get(
            'hgvs', None)
        self.id = kwargs.get(
            'id', None)
        self.minorAllele = kwargs.get(
            'minorAllele', None)
        self.minorAlleleFreq = kwargs.get(
            'minorAlleleFreq', None)
        self.populationFrequencies = kwargs.get(
            'populationFrequencies', None)
        self.reference = kwargs.get(
            'reference', None)
        self.start = kwargs.get(
            'start', None)
        self.variantTraitAssociation = kwargs.get(
            'variantTraitAssociation', None)
        self.xrefs = kwargs.get(
            'xrefs', None)


class VariantAvro(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantAvro", "fields": [{"doc": "", "type":
["null", "string"], "name": "id"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "names"}, {"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": "int",
"name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc":
"", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "strand"}, {"default": null, "doc": "",
"type": ["null", {"fields": [{"default": 0, "type": "int", "name":
"ciStartLeft"}, {"default": 0, "type": "int", "name": "ciStartRight"},
{"default": 0, "type": "int", "name": "ciEndLeft"}, {"default": 0,
"type": "int", "name": "ciEndRight"}, {"doc": "", "type": ["null",
"int"], "name": "copyNumber"}], "type": "record", "name":
"StructuralVariation"}], "name": "sv"}, {"doc": "", "type": "int",
"name": "length"}, {"doc": "", "type": {"symbols": ["SNV", "SNP",
"MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION",
"INVERSION", "CNV", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "",
"type": "enum", "name": "VariantType"}, "name": "type"}, {"default":
null, "doc": "", "type": ["null", {"values": {"items": "string",
"type": "array"}, "type": "map"}], "name": "hgvs"}, {"doc": "",
"type": {"items": {"fields": [{"doc": "", "type": ["null", "string"],
"name": "studyId"}, {"default": [], "doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"},
{"doc": "", "type": ["null", "string"], "name": "call"}, {"doc": "",
"type": {"values": "string", "type": "map"}, "name": "attributes"}],
"type": "record", "name": "FileEntry"}, "type": "array"}, "name":
"files"}, {"default": null, "doc": "", "type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "chromosome"},
{"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "",
"type": ["null", "int"], "name": "end"}, {"doc": "", "type": ["null",
"string"], "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"type": "VariantType", "name": "type"}], "type":
"record", "name": "AlternateCoordinate"}, "type": "array"}], "name":
"secondaryAlternates"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "format"}, {"doc": "", "type": {"items":
{"items": "string", "type": "array"}, "type": "array"}, "name":
"samplesData"}, {"doc": "", "type": {"values": {"fields": [{"type":
["null", "string"], "name": "refAllele"}, {"type": ["null", "string"],
"name": "altAllele"}, {"type": ["null", "int"], "name":
"refAlleleCount"}, {"type": ["null", "int"], "name":
"altAlleleCount"}, {"type": {"values": "int", "type": "map", "java-
key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesCount"}, {"type": {"values": "float", "type": "map", "java-
key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"},
{"type": ["null", "int"], "name": "missingGenotypes"}, {"type":
["null", "float"], "name": "refAlleleFreq"}, {"type": ["null",
"float"], "name": "altAlleleFreq"}, {"type": ["null", "float"],
"name": "maf"}, {"type": ["null", "float"], "name": "mgf"}, {"type":
["null", "string"], "name": "mafAllele"}, {"type": ["null", "string"],
"name": "mgfGenotype"}, {"type": ["null", "boolean"], "name":
"passedFilters"}, {"type": ["null", "int"], "name":
"mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name":
"controlsPercentDominant"}, {"type": ["null", "float"], "name":
"casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name":
"quality"}, {"type": ["null", "int"], "name": "numSamples"},
{"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields":
[{"type": ["null", "float"], "name": "chi2"}, {"type": ["null",
"float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null",
"int"], "name": "n_Aa_10"}, {"type": ["null", "int"], "name":
"n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"],
"name": "e_aa_00"}, {"type": ["null", "float"], "name": "p"}, {"type":
["null", "float"], "name": "q"}], "type": "record", "name":
"VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record",
"name": "VariantStats"}, "type": "map"}, "name": "stats"}], "type":
"record", "name": "StudyEntry"}, "type": "array"}, "name": "studies"},
{"default": null, "doc": "", "type": ["null", {"fields": [{"type":
["null", "string"], "name": "chromosome"}, {"type": ["null", "int"],
"name": "start"}, {"type": ["null", "string"], "name": "reference"},
{"type": ["null", "string"], "name": "alternate"}, {"type": ["null",
"string"], "name": "ancestralAllele"}, {"type": ["null", "string"],
"name": "id"}, {"type": ["null", {"items": {"fields": [{"type":
["null", "string"], "name": "id"}, {"type": ["null", "string"],
"name": "source"}], "type": "record", "name": "Xref"}, "type":
"array"}], "name": "xrefs"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "hgvs"}, {"type": ["null", "string"],
"name": "displayConsequenceType"}, {"default": [], "type": {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "ensemblGeneId"}, {"type": ["null",
"string"], "name": "ensemblTranscriptId"}, {"type": ["null",
"string"], "name": "strand"}, {"type": ["null", "string"], "name":
"biotype"}, {"type": ["null", "int"], "name": "exonNumber"}, {"type":
["null", {"items": "string", "type": "array"}], "name":
"transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"},
{"type": ["null", "string"], "name": "codon"}, {"type": ["null",
{"fields": [{"default": null, "type": ["null", "string"], "name":
"uniprotAccession"}, {"default": null, "type": ["null", "string"],
"name": "uniprotName"}, {"type": "int", "name": "position"}, {"type":
["null", "string"], "name": "reference"}, {"type": ["null", "string"],
"name": "alternate"}, {"type": ["null", "string"], "name":
"uniprotVariantId"}, {"type": ["null", "string"], "name":
"functionalDescription"}, {"type": ["null", {"items": {"fields":
[{"type": "double", "name": "score"}, {"type": "string", "name":
"source"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "keywords"}, {"type": ["null", {"items": {"fields":
[{"type": ["null", "string"], "name": "id"}, {"type": "int", "name":
"start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}],
"type": "record", "name": "ProteinFeature"}, "type": "array"}],
"name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"},
{"type": {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name":
"sequenceOntologyTerms"}], "type": "record", "name":
"ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name":
"study"}, {"type": "string", "name": "population"}, {"type": "string",
"name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name":
"altAlleleFreq"}, {"type": ["null", "float"], "name":
"refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name":
"altHomGenotypeFreq"}], "type": "record", "name":
"PopulationFrequency"}, "type": "array"}], "name":
"populationFrequencies"}, {"type": ["null", "string"], "name":
"minorAllele"}, {"type": ["null", "float"], "name":
"minorAlleleFreq"}, {"type": ["null", {"items": "Score", "type":
"array"}], "name": "conservation"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "transcriptId"}, {"type": ["null",
"string"], "name": "experimentalFactor"}, {"type": ["null", "string"],
"name": "factorValue"}, {"type": ["null", "string"], "name":
"experimentId"}, {"type": ["null", "string"], "name":
"technologyPlatform"}, {"type": ["null", {"symbols": ["UP", "DOWN"],
"type": "enum", "name": "ExpressionCall"}], "name": "expression"},
{"type": ["null", "float"], "name": "pvalue"}], "type": "record",
"name": "Expression"}, "type": "array"}], "name": "geneExpression"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name":
"id"}, {"type": "string", "name": "name"}, {"type": ["null",
"string"], "name": "hpo"}, {"type": ["null", "float"], "name":
"score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"},
{"type": ["null", {"items": "string", "type": "array"}], "name":
"associationTypes"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "sources"}, {"type": "string", "name": "source"}],
"type": "record", "name": "GeneTraitAssociation"}, "type": "array"}],
"name": "geneTraitAssociation"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"],
"name": "source"}, {"type": ["null", "string"], "name": "studyType"},
{"type": ["null", "string"], "name": "type"}], "type": "record",
"name": "GeneDrugInteraction"}, "type": "array"}], "name":
"geneDrugInteraction"}, {"type": ["null", {"fields": [{"type":
["null", {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "clinicalSignificance"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": {"items": "string", "type": "array"}, "name": "geneNames"},
{"type": "string", "name": "reviewStatus"}], "type": "record", "name":
"ClinVar"}, "type": "array"}], "name": "clinvar"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "snpIdCurrent"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": "double", "name": "riskAlleleFrequency"}, {"type": "string",
"name": "reportedGenes"}], "type": "record", "name": "Gwas"}, "type":
"array"}], "name": "gwas"}, {"type": ["null", {"items": {"fields":
[{"type": "string", "name": "mutationId"}, {"type": "string", "name":
"primarySite"}, {"type": "string", "name": "siteSubtype"}, {"type":
"string", "name": "primaryHistology"}, {"type": "string", "name":
"histologySubtype"}, {"type": "string", "name": "sampleSource"},
{"type": "string", "name": "tumourOrigin"}, {"type": "string", "name":
"geneName"}, {"type": "string", "name": "mutationSomaticStatus"}],
"type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}],
"name": "variantTraitAssociation"}, {"type": ["null", {"items":
"Score", "type": "array"}], "name": "functionalScore"}, {"default":
null, "type": ["null", {"values": {"fields": [{"type": {"values":
"string", "type": "map"}, "name": "attribute"}], "type": "record",
"name": "AdditionalAttribute"}, "type": "map"}], "name":
"additionalAttributes"}], "type": "record", "name":
"VariantAnnotation"}], "name": "annotation"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "alternate",
        "chromosome",
        "end",
        "id",
        "length",
        "reference",
        "start",
        "studies",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotation': VariantAnnotation,
            'studies': StudyEntry,
            'sv': StructuralVariation,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotation': VariantAnnotation,
            'studies': StudyEntry,
            'sv': StructuralVariation,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'annotation', 'chromosome', 'end', 'hgvs', 'id',
        'length', 'names', 'reference', 'start', 'strand', 'studies',
        'sv', 'type'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', 'None')
        self.annotation = kwargs.get(
            'annotation', None)
        self.chromosome = kwargs.get(
            'chromosome', 'None')
        self.end = kwargs.get(
            'end', None)
        self.hgvs = kwargs.get(
            'hgvs', None)
        self.id = kwargs.get(
            'id', None)
        self.length = kwargs.get(
            'length', None)
        self.names = kwargs.get(
            'names', [])
        self.reference = kwargs.get(
            'reference', 'None')
        self.start = kwargs.get(
            'start', None)
        self.strand = kwargs.get(
            'strand', None)
        self.studies = kwargs.get(
            'studies', None)
        self.sv = kwargs.get(
            'sv', None)
        self.type = kwargs.get(
            'type', None)


class VariantFileMetadata(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantFileMetadata", "fields": [{"type": "string",
"name": "fileId"}, {"type": "string", "name": "studyId"}, {"default":
null, "type": ["null", "string"], "name": "fileName"}, {"default":
null, "type": ["null", "string"], "name": "studyName"}, {"default":
[], "type": {"items": "string", "type": "array"}, "name": "samples"},
{"type": {"symbols": ["NONE", "BASIC", "EVS", "EXAC"], "type": "enum",
"name": "Aggregation"}, "name": "aggregation"}, {"type": ["null",
{"fields": [{"type": "int", "name": "numRecords"}, {"type": "int",
"name": "samplesCount"}, {"type": "int", "name": "passCount"},
{"type": "int", "name": "transitionsCount"}, {"type": "int", "name":
"transversionsCount"}, {"type": "double", "name": "meanQuality"},
{"type": {"values": "int", "type": "map"}, "name":
"variantTypeCounts"}, {"type": {"values": "int", "type": "map"},
"name": "chromosomeCounts"}, {"type": {"values": "int", "type":
"map"}, "name": "consequenceTypesCount"}], "type": "record", "name":
"VariantGlobalStats"}], "name": "stats"}, {"type": {"values":
["string", {"fields": [{"type": "string", "name": "fileFormat"},
{"type": {"values": {"items": ["string", {"values": "string", "type":
"map"}], "type": "array"}, "type": "map"}, "name": "meta"}], "type":
"record", "name": "VcfHeader"}], "type": "map"}, "name": "metadata"},
{"type": ["null", "VcfHeader"], "name": "header"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "aggregation",
        "fileId",
        "header",
        "metadata",
        "stats",
        "studyId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VcfHeader,
            'stats': VariantGlobalStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VcfHeader,
            'stats': VariantGlobalStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'aggregation', 'fileId', 'fileName', 'header', 'metadata',
        'samples', 'stats', 'studyId', 'studyName'
    ]

    def __init__(self, **kwargs):
        self.aggregation = kwargs.get(
            'aggregation', None)
        self.fileId = kwargs.get(
            'fileId', 'None')
        self.fileName = kwargs.get(
            'fileName', None)
        self.header = kwargs.get(
            'header', None)
        self.metadata = kwargs.get(
            'metadata', None)
        self.samples = kwargs.get(
            'samples', [])
        self.stats = kwargs.get(
            'stats', None)
        self.studyId = kwargs.get(
            'studyId', 'None')
        self.studyName = kwargs.get(
            'studyName', None)


class VariantGlobalStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantGlobalStats", "fields": [{"type": "int",
"name": "numRecords"}, {"type": "int", "name": "samplesCount"},
{"type": "int", "name": "passCount"}, {"type": "int", "name":
"transitionsCount"}, {"type": "int", "name": "transversionsCount"},
{"type": "double", "name": "meanQuality"}, {"type": {"values": "int",
"type": "map"}, "name": "variantTypeCounts"}, {"type": {"values":
"int", "type": "map"}, "name": "chromosomeCounts"}, {"type":
{"values": "int", "type": "map"}, "name": "consequenceTypesCount"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "chromosomeCounts",
        "consequenceTypesCount",
        "meanQuality",
        "numRecords",
        "passCount",
        "samplesCount",
        "transitionsCount",
        "transversionsCount",
        "variantTypeCounts",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chromosomeCounts', 'consequenceTypesCount', 'meanQuality',
        'numRecords', 'passCount', 'samplesCount', 'transitionsCount',
        'transversionsCount', 'variantTypeCounts'
    ]

    def __init__(self, **kwargs):
        self.chromosomeCounts = kwargs.get(
            'chromosomeCounts', None)
        self.consequenceTypesCount = kwargs.get(
            'consequenceTypesCount', None)
        self.meanQuality = kwargs.get(
            'meanQuality', None)
        self.numRecords = kwargs.get(
            'numRecords', None)
        self.passCount = kwargs.get(
            'passCount', None)
        self.samplesCount = kwargs.get(
            'samplesCount', None)
        self.transitionsCount = kwargs.get(
            'transitionsCount', None)
        self.transversionsCount = kwargs.get(
            'transversionsCount', None)
        self.variantTypeCounts = kwargs.get(
            'variantTypeCounts', None)


class VariantHardyWeinbergStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantHardyWeinbergStats", "fields": [{"type":
["null", "float"], "name": "chi2"}, {"type": ["null", "float"],
"name": "pValue"}, {"type": ["null", "int"], "name": "n"}, {"type":
["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name":
"n_Aa_10"}, {"type": ["null", "int"], "name": "n_aa_00"}, {"type":
["null", "float"], "name": "e_AA_11"}, {"type": ["null", "float"],
"name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"},
{"type": ["null", "float"], "name": "p"}, {"type": ["null", "float"],
"name": "q"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "chi2",
        "e_AA_11",
        "e_Aa_10",
        "e_aa_00",
        "n",
        "n_AA_11",
        "n_Aa_10",
        "n_aa_00",
        "p",
        "pValue",
        "q",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chi2', 'e_AA_11', 'e_Aa_10', 'e_aa_00', 'n', 'n_AA_11',
        'n_Aa_10', 'n_aa_00', 'p', 'pValue', 'q'
    ]

    def __init__(self, **kwargs):
        self.chi2 = kwargs.get(
            'chi2', None)
        self.e_AA_11 = kwargs.get(
            'e_AA_11', None)
        self.e_Aa_10 = kwargs.get(
            'e_Aa_10', None)
        self.e_aa_00 = kwargs.get(
            'e_aa_00', None)
        self.n = kwargs.get(
            'n', None)
        self.n_AA_11 = kwargs.get(
            'n_AA_11', None)
        self.n_Aa_10 = kwargs.get(
            'n_Aa_10', None)
        self.n_aa_00 = kwargs.get(
            'n_aa_00', None)
        self.p = kwargs.get(
            'p', None)
        self.pValue = kwargs.get(
            'pValue', None)
        self.q = kwargs.get(
            'q', None)


class VariantStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantStats", "fields": [{"type": ["null",
"string"], "name": "refAllele"}, {"type": ["null", "string"], "name":
"altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"},
{"type": ["null", "int"], "name": "altAlleleCount"}, {"type":
{"values": "int", "type": "map", "java-key-class":
"org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesCount"}, {"type": {"values": "float", "type": "map", "java-
key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"},
{"type": ["null", "int"], "name": "missingGenotypes"}, {"type":
["null", "float"], "name": "refAlleleFreq"}, {"type": ["null",
"float"], "name": "altAlleleFreq"}, {"type": ["null", "float"],
"name": "maf"}, {"type": ["null", "float"], "name": "mgf"}, {"type":
["null", "string"], "name": "mafAllele"}, {"type": ["null", "string"],
"name": "mgfGenotype"}, {"type": ["null", "boolean"], "name":
"passedFilters"}, {"type": ["null", "int"], "name":
"mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name":
"controlsPercentDominant"}, {"type": ["null", "float"], "name":
"casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name":
"quality"}, {"type": ["null", "int"], "name": "numSamples"},
{"default": null, "type": ["null", {"symbols": ["SNV", "SNP", "MNV",
"MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION",
"INVERSION", "CNV", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "",
"type": "enum", "name": "VariantType"}], "name": "variantType"},
{"default": null, "type": ["null", {"fields": [{"type": ["null",
"float"], "name": "chi2"}, {"type": ["null", "float"], "name":
"pValue"}, {"type": ["null", "int"], "name": "n"}, {"type": ["null",
"int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name":
"n_Aa_10"}, {"type": ["null", "int"], "name": "n_aa_00"}, {"type":
["null", "float"], "name": "e_AA_11"}, {"type": ["null", "float"],
"name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"},
{"type": ["null", "float"], "name": "p"}, {"type": ["null", "float"],
"name": "q"}], "type": "record", "name":
"VariantHardyWeinbergStats"}], "name": "hw"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "altAllele",
        "altAlleleCount",
        "altAlleleFreq",
        "casesPercentDominant",
        "casesPercentRecessive",
        "controlsPercentDominant",
        "controlsPercentRecessive",
        "genotypesCount",
        "genotypesFreq",
        "maf",
        "mafAllele",
        "mendelianErrors",
        "mgf",
        "mgfGenotype",
        "missingAlleles",
        "missingGenotypes",
        "numSamples",
        "passedFilters",
        "quality",
        "refAllele",
        "refAlleleCount",
        "refAlleleFreq",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'hw': VariantHardyWeinbergStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'hw': VariantHardyWeinbergStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'altAllele', 'altAlleleCount', 'altAlleleFreq',
        'casesPercentDominant', 'casesPercentRecessive',
        'controlsPercentDominant', 'controlsPercentRecessive',
        'genotypesCount', 'genotypesFreq', 'hw', 'maf', 'mafAllele',
        'mendelianErrors', 'mgf', 'mgfGenotype', 'missingAlleles',
        'missingGenotypes', 'numSamples', 'passedFilters', 'quality',
        'refAllele', 'refAlleleCount', 'refAlleleFreq', 'variantType'
    ]

    def __init__(self, **kwargs):
        self.altAllele = kwargs.get(
            'altAllele', None)
        self.altAlleleCount = kwargs.get(
            'altAlleleCount', None)
        self.altAlleleFreq = kwargs.get(
            'altAlleleFreq', None)
        self.casesPercentDominant = kwargs.get(
            'casesPercentDominant', None)
        self.casesPercentRecessive = kwargs.get(
            'casesPercentRecessive', None)
        self.controlsPercentDominant = kwargs.get(
            'controlsPercentDominant', None)
        self.controlsPercentRecessive = kwargs.get(
            'controlsPercentRecessive', None)
        self.genotypesCount = kwargs.get(
            'genotypesCount', None)
        self.genotypesFreq = kwargs.get(
            'genotypesFreq', None)
        self.hw = kwargs.get(
            'hw', None)
        self.maf = kwargs.get(
            'maf', None)
        self.mafAllele = kwargs.get(
            'mafAllele', None)
        self.mendelianErrors = kwargs.get(
            'mendelianErrors', None)
        self.mgf = kwargs.get(
            'mgf', None)
        self.mgfGenotype = kwargs.get(
            'mgfGenotype', None)
        self.missingAlleles = kwargs.get(
            'missingAlleles', None)
        self.missingGenotypes = kwargs.get(
            'missingGenotypes', None)
        self.numSamples = kwargs.get(
            'numSamples', None)
        self.passedFilters = kwargs.get(
            'passedFilters', None)
        self.quality = kwargs.get(
            'quality', None)
        self.refAllele = kwargs.get(
            'refAllele', None)
        self.refAlleleCount = kwargs.get(
            'refAlleleCount', None)
        self.refAlleleFreq = kwargs.get(
            'refAlleleFreq', None)
        self.variantType = kwargs.get(
            'variantType', None)


class VariantTraitAssociation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantTraitAssociation", "fields": [{"type":
["null", {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "clinicalSignificance"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": {"items": "string", "type": "array"}, "name": "geneNames"},
{"type": "string", "name": "reviewStatus"}], "type": "record", "name":
"ClinVar"}, "type": "array"}], "name": "clinvar"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "snpIdCurrent"},
{"type": {"items": "string", "type": "array"}, "name": "traits"},
{"type": "double", "name": "riskAlleleFrequency"}, {"type": "string",
"name": "reportedGenes"}], "type": "record", "name": "Gwas"}, "type":
"array"}], "name": "gwas"}, {"type": ["null", {"items": {"fields":
[{"type": "string", "name": "mutationId"}, {"type": "string", "name":
"primarySite"}, {"type": "string", "name": "siteSubtype"}, {"type":
"string", "name": "primaryHistology"}, {"type": "string", "name":
"histologySubtype"}, {"type": "string", "name": "sampleSource"},
{"type": "string", "name": "tumourOrigin"}, {"type": "string", "name":
"geneName"}, {"type": "string", "name": "mutationSomaticStatus"}],
"type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "clinvar",
        "cosmic",
        "gwas",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinvar': ClinVar,
            'cosmic': Cosmic,
            'gwas': Gwas,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinvar': ClinVar,
            'cosmic': Cosmic,
            'gwas': Gwas,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'clinvar', 'cosmic', 'gwas'
    ]

    def __init__(self, **kwargs):
        self.clinvar = kwargs.get(
            'clinvar', None)
        self.cosmic = kwargs.get(
            'cosmic', None)
        self.gwas = kwargs.get(
            'gwas', None)


class VariantType(object):
    """
    * Type of variation, which depends mostly on its length.      *
    <ul>      * <li>SNVs involve a single nucleotide, without changes
    in length</li>      * <li>MNVs involve multiple nucleotides,
    without changes in length</li>      * <li>Indels are insertions or
    deletions of less than SV_THRESHOLD (50) nucleotides</li>      *
    <li>Structural variations are large changes of more than
    SV_THRESHOLD nucleotides</li>      * <li>Copy-number variations
    alter the number of copies of a region</li>      * </ul>
    """
    SNV = "SNV"
    SNP = "SNP"
    MNV = "MNV"
    MNP = "MNP"
    INDEL = "INDEL"
    SV = "SV"
    INSERTION = "INSERTION"
    DELETION = "DELETION"
    TRANSLOCATION = "TRANSLOCATION"
    INVERSION = "INVERSION"
    CNV = "CNV"
    NO_VARIATION = "NO_VARIATION"
    SYMBOLIC = "SYMBOLIC"
    MIXED = "MIXED"


class VcfHeader(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VcfHeader", "fields": [{"type": "string", "name":
"fileFormat"}, {"type": {"values": {"items": ["string", {"values":
"string", "type": "map"}], "type": "array"}, "type": "map"}, "name":
"meta"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "fileFormat",
        "meta",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fileFormat', 'meta'
    ]

    def __init__(self, **kwargs):
        self.fileFormat = kwargs.get(
            'fileFormat', 'None')
        self.meta = kwargs.get(
            'meta', None)


class Xref(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "Xref", "fields": [{"type": ["null", "string"],
"name": "id"}, {"type": ["null", "string"], "name": "source"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "id",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'source'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.source = kwargs.get(
            'source', None)
